// Write a program for developing a lexical analyzer to transfer infix to prefix and also find out the substring and subsequence from a given string

#include <bits/stdc++.h> // Shortcut header in C++ that includes almost every standard library
using namespace std;

// ================== Part 1: Infix to Prefix ==================

// Check if character is an operator
bool isOperator(char ch)
{
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

// Get precedence of operators
int operatorPrecedence(char op)
{
    if (op == '^')
        return 3;
    if (op == '*' || op == '/')
        return 2;
    if (op == '+' || op == '-')
        return 1;
    return -1;
}

// Convert infix expression to postfix notation
string convertInfixToPostfix(string s)
{
    stack<char> st;
    string result;

    for (int i = 0; i < (int)s.size(); i++)
    {
        if (isalnum(s[i])) // Operand
        {
            result += s[i];
        }
        else if (s[i] == '(')
        {
            st.push(s[i]);
        }
        else if (s[i] == ')')
        {
            while (!st.empty() && st.top() != '(')
            {
                result += st.top();
                st.pop();
            }
            if (!st.empty())
                st.pop(); // remove '('
        }
        else // Operator
        {
            while (!st.empty() && operatorPrecedence(s[i]) <= operatorPrecedence(st.top()))
            {
                result += st.top();
                st.pop();
            }
            st.push(s[i]);
        }
    }

    while (!st.empty())
    {
        result += st.top();
        st.pop();
    }

    return result;
}

// Convert infix expression to prefix notation
string convertToPrefix(string infix)
{
    reverse(infix.begin(), infix.end());

    for (int i = 0; i < (int)infix.size(); i++)
    {
        if (infix[i] == '(')
            infix[i] = ')';
        else if (infix[i] == ')')
            infix[i] = '(';
    }

    string postfix = convertInfixToPostfix(infix);
    reverse(postfix.begin(), postfix.end());

    return postfix;
}

// ================== Part 2: Substring and Subsequence ==================

// Generate all substrings
vector<string> allSubstrings(const string &s)
{
    vector<string> subs;
    for (size_t i = 0; i < s.size(); i++)
    {
        for (size_t len = 1; len + i <= s.size(); len++)
        {
            subs.push_back(s.substr(i, len));
        }
    }
    return subs;
}

// Generate all subsequences
void generateSubsequences(const string &s, int idx, string current, vector<string> &result)
{
    if (idx == (int)s.size())
    {
        result.push_back(current);
        return;
    }
    // Exclude current character
    generateSubsequences(s, idx + 1, current, result);
    // Include current character
    generateSubsequences(s, idx + 1, current + s[idx], result);
}

// ================== Main ==================

int main()
{
    // ===== Infix to Prefix =====
    string expr = "(a-b/c)*(a/k-l)";
    cout << "Infix Expression: " << expr << "\n";
    cout << "Prefix Expression: " << convertToPrefix(expr) << "\n\n";

    // ===== Substring =====
    string str = "abc";
    cout << "Original String: " << str << "\n\n";

    cout << "All Substrings:\n";
    vector<string> subs = allSubstrings(str);
    for (auto &sub : subs)
        cout << sub << "\n";

    // ===== Subsequence =====
    cout << "\nAll Subsequences:\n";
    vector<string> subsequences;
    generateSubsequences(str, 0, "", subsequences);
    for (auto &seq : subsequences)
        cout << seq << "\n";

    return 0;
}
